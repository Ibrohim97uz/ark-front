{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Ibrohim\\\\Desktop\\\\ark-front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Ibrohim\\\\Desktop\\\\ark-front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\Ibrohim\\\\Desktop\\\\ark-front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\Ibrohim\\\\Desktop\\\\ark-front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ibrohim\\\\Desktop\\\\ark-front\\\\src\\\\routes\\\\routesManagers\\\\main\\\\clients\\\\client\\\\index.js\";\nimport React, { Component } from 'react';\nimport { Card, notification } from \"antd\";\nimport ApiRequest from \"../../../../../services\";\nimport api from '../../../../../services/app';\nimport Filter from './components/Filter';\nimport Modal from './components/Modal';\nimport List from './components/List';\nimport IntlMessages, { intlMessages } from \"../../../../../util/IntlMessages\";\nimport { connect } from \"react-redux\";\nimport { onAuthUser } from \"../../../../../redux/auth/action\";\nvar getClientPoint = api.getClientPoint,\n    postClientPoint = api.postClientPoint,\n    getCountry = api.getCountry;\n\nvar Region = /*#__PURE__*/function (_Component) {\n  _inherits(Region, _Component);\n\n  var _super = _createSuper(Region);\n\n  function Region(props) {\n    var _this;\n\n    _classCallCheck(this, Region);\n\n    _this = _super.call(this, props);\n\n    _this.getInit = function () {\n      if (_this.props.location.state.id) {\n        _this.getPoints();\n      }\n\n      ApiRequest(getCountry).then(function (result) {\n        if (result.success) {\n          _this.setState(function (state, props) {\n            return {\n              countries: result._embedded.list\n            };\n          });\n        }\n      });\n    };\n\n    _this.onRequestFunc = function (path, data, message) {\n      ApiRequest(path, data).then(function (result) {\n        if (result.success) {\n          _this.getPoints();\n\n          _this.setState({\n            actionType: 'create',\n            modalVisible: false,\n            currentItem: {}\n          });\n\n          notification.success({\n            key: message.key,\n            message: message.messageSuccess,\n            description: message.descriptionSuccess\n          });\n        } else {\n          notification.error({\n            key: message.key,\n            message: message.messageError,\n            description: message.descriptionError\n          });\n        }\n      });\n    };\n\n    _this.onSubmit = function (data) {\n      var message = {};\n      data['clientId'] = _this.props.location.state.id;\n\n      if (_this.state.actionType === \"create\") {\n        message = {\n          key: \"create\",\n          messageError: intlMessages({\n            en: \"There was an error creating\",\n            ru: \"Произошла ошибка при создании\",\n            uz: \"Yaratishda xatolik yuz berdi\"\n          }),\n          messageSuccess: intlMessages({\n            en: \"Successfully created\",\n            ru: \"Успешно создан\",\n            uz: \"Muvaffaqqiyatli yaratildi\"\n          })\n        };\n\n        _this.onRequestFunc(postClientPoint, data, message);\n      }\n\n      if (_this.state.actionType === \"update\") {\n        message = {\n          key: \"update\",\n          messageError: intlMessages({\n            en: \"There was an error updating\",\n            ru: \"Произошла ошибка при изменение\",\n            uz: \"Tahrirlashda xatolik yuz berdi\"\n          }),\n          messageSuccess: intlMessages({\n            en: \"Successfully updated\",\n            ru: \"Успешно изменено\",\n            uz: \"Muvaffaqqiyatli tahrirlandi\"\n          })\n        };\n\n        _this.onRequestFunc(postClientPoint, data, message);\n      }\n    };\n\n    _this.onCancel = function () {\n      _this.setState({\n        modalVisible: false,\n        actionType: 'create'\n      });\n    };\n\n    _this.onAdd = function () {\n      _this.setState({\n        modalVisible: true,\n        actionType: 'create'\n      });\n    };\n\n    _this.onEditItem = function (dataItem) {\n      _this.setState({\n        actionType: \"update\",\n        currentItem: dataItem,\n        modalVisible: true\n      });\n    };\n\n    _this.state = {\n      actionType: 'create',\n      align: \"center\",\n      modalVisible: false,\n      columns: [{\n        title: /*#__PURE__*/React.createElement(\"strong\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 16\n          }\n        }, \"\\u2116\"),\n        key: \"№\",\n        width: 60,\n        render: function render(text, record, index) {\n          return index + 1;\n        }\n      }, {\n        title: /*#__PURE__*/React.createElement(IntlMessages, {\n          id: 'date',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 18\n          }\n        }),\n        key: \"date\",\n        align: \"center\",\n        render: function render(text, record, index) {\n          return record.date.substring(0, 10);\n        }\n      }, {\n        title: /*#__PURE__*/React.createElement(IntlMessages, {\n          id: 'fromCountry',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 18\n          }\n        }),\n        key: \"fromCountry\",\n        align: \"center\",\n        render: function render(text, record, index) {\n          return intlMessages({\n            en: record.fromCountry && record.fromCountry.nameEn,\n            ru: record.fromCountry && record.fromCountry.nameRu,\n            uz: record.fromCountry && record.fromCountry.nameUz\n          });\n        }\n      }, {\n        title: /*#__PURE__*/React.createElement(IntlMessages, {\n          id: 'toCountry',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 18\n          }\n        }),\n        key: \"toCountry\",\n        align: \"toCountry\",\n        render: function render(text, record, index) {\n          return intlMessages({\n            en: record.toCountry && record.toCountry.nameEn,\n            ru: record.toCountry && record.toCountry.nameRu,\n            uz: record.toCountry && record.toCountry.nameUz\n          });\n        }\n      }],\n      currentItem: {},\n      countries: [],\n      list: []\n    };\n    return _this;\n  }\n\n  _createClass(Region, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getInit();\n    }\n  }, {\n    key: \"getPoints\",\n    value: function getPoints() {\n      var _this2 = this;\n\n      ApiRequest(getClientPoint, {\n        clientId: this.props.location.state.id\n      }).then(function (result) {\n        if (result.success) {\n          _this2.setState(function (state, props) {\n            return {\n              list: result.object.points\n            };\n          });\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          currentItem = _this$state.currentItem,\n          modalVisible = _this$state.modalVisible,\n          columns = _this$state.columns,\n          countries = _this$state.countries,\n          list = _this$state.list,\n          actionType = _this$state.actionType;\n      return /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Filter, {\n        onAdd: this.onAdd,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(List, {\n        visibleColumns: columns,\n        dataSource: list,\n        onEditItem: this.onEditItem,\n        pagination: list && list.length > 20,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Modal, {\n        onSubmit: this.onSubmit,\n        onCancel: this.onCancel,\n        countries: countries,\n        actionType: actionType,\n        modalVisible: modalVisible,\n        currentItem: actionType === 'create' ? {} : currentItem,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return Region;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(_ref) {\n  var routing = _ref.routing;\n  return routing.location;\n};\n\nexport default connect(mapStateToProps, {\n  onAuthUser: onAuthUser\n})(Region);","map":{"version":3,"sources":["C:/Users/Ibrohim/Desktop/ark-front/src/routes/routesManagers/main/clients/client/index.js"],"names":["React","Component","Card","notification","ApiRequest","api","Filter","Modal","List","IntlMessages","intlMessages","connect","onAuthUser","getClientPoint","postClientPoint","getCountry","Region","props","getInit","location","state","id","getPoints","then","result","success","setState","countries","_embedded","list","onRequestFunc","path","data","message","actionType","modalVisible","currentItem","key","messageSuccess","description","descriptionSuccess","error","messageError","descriptionError","onSubmit","en","ru","uz","onCancel","onAdd","onEditItem","dataItem","align","columns","title","width","render","text","record","index","date","substring","fromCountry","nameEn","nameRu","nameUz","toCountry","clientId","object","points","length","mapStateToProps","routing"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {Card, notification} from \"antd\";\r\nimport ApiRequest from \"../../../../../services\";\r\nimport api from '../../../../../services/app'\r\nimport Filter from './components/Filter'\r\nimport Modal from './components/Modal'\r\nimport List from './components/List'\r\nimport IntlMessages, {intlMessages} from \"../../../../../util/IntlMessages\";\r\nimport { connect } from \"react-redux\";\r\nimport { onAuthUser } from \"../../../../../redux/auth/action\";\r\n\r\nconst {getClientPoint, postClientPoint,getCountry} = api;\r\n\r\nclass Region extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      actionType: 'create',\r\n      align: \"center\",\r\n      modalVisible: false,\r\n      columns: [{\r\n        title: <strong>№</strong>,\r\n        key: \"№\",\r\n        width: 60,\r\n        render: (text, record, index) => index + 1,\r\n      },\r\n        {\r\n          title: <IntlMessages id={'date'} />,\r\n          key: \"date\",\r\n          align: \"center\",\r\n          render: (text, record, index) => record.date.substring(0,10)\r\n        },\r\n        {\r\n          title: <IntlMessages id={'fromCountry'} />,\r\n          key: \"fromCountry\",\r\n          align: \"center\",\r\n          render: (text, record, index) => intlMessages({\r\n            en: record.fromCountry && record.fromCountry.nameEn,\r\n            ru: record.fromCountry && record.fromCountry.nameRu,\r\n            uz: record.fromCountry && record.fromCountry.nameUz\r\n          })\r\n        },\r\n        {\r\n          title: <IntlMessages id={'toCountry'} />,\r\n          key: \"toCountry\",\r\n          align: \"toCountry\",\r\n          render: (text, record, index) => intlMessages({\r\n            en: record.toCountry && record.toCountry.nameEn,\r\n            ru: record.toCountry && record.toCountry.nameRu,\r\n            uz: record.toCountry && record.toCountry.nameUz\r\n          })\r\n        }\r\n      ],\r\n      currentItem: {},\r\n      countries: [],\r\n      list: [],\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getInit()\r\n  }\r\n\r\n  getInit = () => {\r\n    if (this.props.location.state.id){\r\n      this.getPoints()\r\n    }\r\n\r\n    ApiRequest(getCountry).then((result => {\r\n      if (result.success) {\r\n        this.setState((state, props) => ({\r\n          countries: result._embedded.list,\r\n        }));\r\n      }\r\n    }))\r\n  };\r\n\r\n  getPoints(){\r\n    ApiRequest(getClientPoint,{clientId:this.props.location.state.id}).then((result => {\r\n      if (result.success) {\r\n        this.setState((state, props) => ({\r\n          list: result.object.points,\r\n        }));\r\n      }\r\n    }))\r\n  }\r\n\r\n  onRequestFunc = (path, data, message) => {\r\n    ApiRequest(path, data).then((result => {\r\n      if (result.success) {\r\n        this.getPoints();\r\n        this.setState({\r\n          actionType: 'create',\r\n          modalVisible: false,\r\n          currentItem: {},\r\n        });\r\n        notification.success({\r\n          key: message.key,\r\n          message: message.messageSuccess,\r\n          description: message.descriptionSuccess,\r\n        });\r\n      } else {\r\n        notification.error({\r\n          key: message.key,\r\n          message: message.messageError,\r\n          description: message.descriptionError,\r\n        });\r\n      }\r\n    }))\r\n  };\r\n\r\n\r\n  onSubmit = (data) => {\r\n    let message = {};\r\n    data['clientId']=this.props.location.state.id;\r\n    if (this.state.actionType === \"create\") {\r\n      message = {\r\n        key: \"create\",\r\n        messageError: intlMessages({en:\"There was an error creating\",ru:\"Произошла ошибка при создании\",uz:\"Yaratishda xatolik yuz berdi\"}),\r\n        messageSuccess: intlMessages({en:\"Successfully created\",ru:\"Успешно создан\",uz:\"Muvaffaqqiyatli yaratildi\"}),\r\n      };\r\n      this.onRequestFunc(postClientPoint, data, message)\r\n    }\r\n    if (this.state.actionType === \"update\") {\r\n      message = {\r\n        key: \"update\",\r\n        messageError: intlMessages({en:\"There was an error updating\",ru:\"Произошла ошибка при изменение\",uz:\"Tahrirlashda xatolik yuz berdi\"}),\r\n        messageSuccess: intlMessages({en:\"Successfully updated\",ru:\"Успешно изменено\",uz:\"Muvaffaqqiyatli tahrirlandi\"}),\r\n      };\r\n      this.onRequestFunc(postClientPoint, data, message)\r\n    }\r\n  };\r\n  onCancel = () => {\r\n    this.setState({modalVisible: false, actionType: 'create'})\r\n  };\r\n  onAdd = () => {\r\n    this.setState({modalVisible: true, actionType: 'create'})\r\n  };\r\n  onEditItem = (dataItem) => {\r\n    this.setState({\r\n      actionType: \"update\",\r\n      currentItem: dataItem,\r\n      modalVisible: true,\r\n    })\r\n  };\r\n\r\n\r\n\r\n\r\n  render() {\r\n\r\n    const {currentItem, modalVisible, columns, countries, list, actionType} = this.state;\r\n    return (\r\n      <Card>\r\n        <Filter\r\n            onAdd={this.onAdd}\r\n\r\n        />\r\n        <List visibleColumns={columns}\r\n              dataSource={list}\r\n              onEditItem={this.onEditItem}\r\n              pagination={list && list.length>20}\r\n             />\r\n        <Modal\r\n          onSubmit={this.onSubmit}\r\n          onCancel={this.onCancel}\r\n          countries={countries}\r\n          actionType={actionType}\r\n          modalVisible={modalVisible}\r\n          currentItem={actionType === 'create' ? {} : currentItem}\r\n        />\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = ({routing}) => {\r\n  return routing.location;\r\n};\r\n\r\nexport default connect(mapStateToProps, {onAuthUser})(Region);\r\n"]},"metadata":{},"sourceType":"module"}